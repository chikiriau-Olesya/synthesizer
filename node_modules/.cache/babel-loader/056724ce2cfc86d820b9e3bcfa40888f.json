{"ast":null,"code":"var _jsxFileName = \"/Users/olesyashevchenko/synthExample/app/javascript/control_components/SequencerRow.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport ToggleButton from './ToggleButton';\n\nvar SequencerRow = /*#__PURE__*/function (_PureComponent) {\n  _inherits(SequencerRow, _PureComponent);\n\n  var _super = _createSuper(SequencerRow);\n\n  function SequencerRow(props) {\n    var _this;\n\n    _classCallCheck(this, SequencerRow);\n\n    _this = _super.call(this, props);\n\n    _this.checkToggleState = function (option, events) {\n      var name = _this.props.name;\n      var toggleState = false;\n      events.forEach(function (event, i) {\n        if (event.time === option && event.noteName === name) {\n          toggleState = true;\n        }\n      });\n      return toggleState;\n    };\n\n    _this.handleChange = function (value) {\n      var _this$props = _this.props,\n          property = _this$props.property,\n          handleChange = _this$props.handleChange;\n      handleChange(property, value);\n    };\n\n    return _this;\n  }\n\n  _createClass(SequencerRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          name = _this$props2.name,\n          options = _this$props2.options,\n          value = _this$props2.value;\n      var buttonElements = [];\n      options.forEach(function (option, i) {\n        buttonElements.push( /*#__PURE__*/React.createElement(ToggleButton, {\n          text: option,\n          isOn: _this2.checkToggleState(option, value),\n          handleClick: function handleClick() {\n            return _this2.handleChange(option);\n          },\n          key: i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 9\n          }\n        }));\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"SequencerRow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 12\n        }\n      }, buttonElements);\n    }\n  }]);\n\n  return SequencerRow;\n}(PureComponent);\n\nexport { SequencerRow as default };\nSequencerRow.propTypes = {\n  name: PropTypes.string.isRequired,\n  property: PropTypes.array.isRequired,\n  // value: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  handleChange: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/olesyashevchenko/synthExample/app/javascript/control_components/SequencerRow.jsx"],"names":["PropTypes","React","PureComponent","ToggleButton","SequencerRow","props","checkToggleState","option","events","name","toggleState","forEach","event","i","time","noteName","handleChange","value","property","options","buttonElements","push","propTypes","string","isRequired","array","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;IAEqBC,Y;;;;;AACnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAInBC,gBAJmB,GAIA,UAACC,MAAD,EAASC,MAAT,EAAoB;AACrC,UAAQC,IAAR,GAAiB,MAAKJ,KAAtB,CAAQI,IAAR;AACA,UAAIC,WAAW,GAAG,KAAlB;AAEAF,MAAAA,MAAM,CAACG,OAAP,CAAe,UAACC,KAAD,EAAQC,CAAR,EAAc;AAC3B,YAAID,KAAK,CAACE,IAAN,KAAeP,MAAf,IAAyBK,KAAK,CAACG,QAAN,KAAmBN,IAAhD,EAAsD;AACpDC,UAAAA,WAAW,GAAG,IAAd;AACD;AACF,OAJD;AAMA,aAAOA,WAAP;AACD,KAfkB;;AAAA,UAiBnBM,YAjBmB,GAiBJ,UAACC,KAAD,EAAW;AACxB,wBAAmC,MAAKZ,KAAxC;AAAA,UAAQa,QAAR,eAAQA,QAAR;AAAA,UAAkBF,YAAlB,eAAkBA,YAAlB;AACAA,MAAAA,YAAY,CAACE,QAAD,EAAWD,KAAX,CAAZ;AACD,KApBkB;;AAAA;AAElB;;;;WAoBD,kBAAS;AAAA;;AACP,yBAAiC,KAAKZ,KAAtC;AAAA,UAAQI,IAAR,gBAAQA,IAAR;AAAA,UAAcU,OAAd,gBAAcA,OAAd;AAAA,UAAuBF,KAAvB,gBAAuBA,KAAvB;AACA,UAAMG,cAAc,GAAG,EAAvB;AAEAD,MAAAA,OAAO,CAACR,OAAR,CAAgB,UAACJ,MAAD,EAASM,CAAT,EAAe;AAC7BO,QAAAA,cAAc,CAACC,IAAf,eACE,oBAAC,YAAD;AACE,UAAA,IAAI,EAAEd,MADR;AAEE,UAAA,IAAI,EAAE,MAAI,CAACD,gBAAL,CAAsBC,MAAtB,EAA8BU,KAA9B,CAFR;AAGE,UAAA,WAAW,EAAE;AAAA,mBAAM,MAAI,CAACD,YAAL,CAAkBT,MAAlB,CAAN;AAAA,WAHf;AAIE,UAAA,GAAG,EAAEM,CAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,OATD;AAWA,0BAAO;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BO,cAA/B,CAAP;AACD;;;;EAvCuClB,a;;SAArBE,Y;AA0CrBA,YAAY,CAACkB,SAAb,GAAyB;AACvBb,EAAAA,IAAI,EAAET,SAAS,CAACuB,MAAV,CAAiBC,UADA;AAEvBN,EAAAA,QAAQ,EAAElB,SAAS,CAACyB,KAAV,CAAgBD,UAFH;AAGvB;AACAL,EAAAA,OAAO,EAAEnB,SAAS,CAACyB,KAAV,CAAgBD,UAJF;AAKvBR,EAAAA,YAAY,EAAEhB,SAAS,CAAC0B,IAAV,CAAeF;AALN,CAAzB","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\n\nimport ToggleButton from './ToggleButton'\n\nexport default class SequencerRow extends PureComponent {\n  constructor(props) {\n    super(props)\n  }\n\n  checkToggleState = (option, events) => {\n    const { name } = this.props\n    let toggleState = false\n\n    events.forEach((event, i) => {\n      if (event.time === option && event.noteName === name) {\n        toggleState = true\n      }\n    })\n\n    return toggleState\n  }\n\n  handleChange = (value) => {\n    const { property, handleChange } = this.props\n    handleChange(property, value)\n  }\n\n  render() {\n    const { name, options, value } = this.props\n    const buttonElements = []\n\n    options.forEach((option, i) => {\n      buttonElements.push(\n        <ToggleButton\n          text={option}\n          isOn={this.checkToggleState(option, value)}\n          handleClick={() => this.handleChange(option)}\n          key={i}\n        />\n      )\n    })\n\n    return <div className=\"SequencerRow\">{buttonElements}</div>\n  }\n}\n\nSequencerRow.propTypes = {\n  name: PropTypes.string.isRequired,\n  property: PropTypes.array.isRequired,\n  // value: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  handleChange: PropTypes.func.isRequired\n}\n"]},"metadata":{},"sourceType":"module"}