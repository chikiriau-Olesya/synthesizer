{"ast":null,"code":"import * as Tone from 'tone';\nimport { generateUniqId } from '../utilities';\nvar synthSettings = {\n  volume: 0.8,\n  detune: 0,\n  portamento: 0.05,\n  envelope: {\n    attack: 0.05,\n    attackCurve: 'exponential',\n    decay: 0.2,\n    decayCurve: 'exponential',\n    sustain: 0.2,\n    release: 1.5,\n    releaseCurve: 'exponential'\n  },\n  oscillator: {\n    type: 'fatsawtooth',\n    modulationType: 'sine',\n    // partialCount: 0,\n    // partials: [],\n    phase: 0,\n    harmonicity: 0.5\n  }\n};\nvar freeverbSettings = {\n  wet: 0.9,\n  roomSize: 0.08,\n  dampening: 40\n};\nvar channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n};\nvar synthNode = new Tone.Synth(synthSettings);\nvar freeverbNode = new Tone.Freeverb(freeverbSettings);\nvar channelNode = new Tone.Channel(channelSettings).toDestination();\nsynthNode.chain(freeverbNode, channelNode);\nvar instrument = [{\n  id: generateUniqId(),\n  name: 'Bass Synth',\n  type: 'ToneSynth',\n  node: synthNode,\n  settings: synthSettings\n}, {\n  id: generateUniqId(),\n  name: 'Freeverb',\n  type: 'FreeverbEffect',\n  node: freeverbNode,\n  settings: freeverbSettings\n}, {\n  id: generateUniqId(),\n  name: 'Channel',\n  type: 'Channel',\n  node: channelNode,\n  settings: channelSettings\n}];\nvar sequention = new Tone.Sequence(function (time, note) {\n  synthNode.triggerAttackRelease(note, '1m', time);\n}, ['C3', 'D3', 'E2', 'E3'], '1m');\nexport { instrument, sequention };","map":{"version":3,"sources":["/Users/olesyashevchenko/synthExample/app/javascript/tunes/bass_synth.js"],"names":["Tone","generateUniqId","synthSettings","volume","detune","portamento","envelope","attack","attackCurve","decay","decayCurve","sustain","release","releaseCurve","oscillator","type","modulationType","phase","harmonicity","freeverbSettings","wet","roomSize","dampening","channelSettings","pan","mute","solo","synthNode","Synth","freeverbNode","Freeverb","channelNode","Channel","toDestination","chain","instrument","id","name","node","settings","sequention","Sequence","time","note","triggerAttackRelease"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,GADY;AAEpBC,EAAAA,MAAM,EAAE,CAFY;AAGpBC,EAAAA,UAAU,EAAE,IAHQ;AAIpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,IADA;AAERC,IAAAA,WAAW,EAAE,aAFL;AAGRC,IAAAA,KAAK,EAAE,GAHC;AAIRC,IAAAA,UAAU,EAAE,aAJJ;AAKRC,IAAAA,OAAO,EAAE,GALD;AAMRC,IAAAA,OAAO,EAAE,GAND;AAORC,IAAAA,YAAY,EAAE;AAPN,GAJU;AAapBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE,aADI;AAEVC,IAAAA,cAAc,EAAE,MAFN;AAGV;AACA;AACAC,IAAAA,KAAK,EAAE,CALG;AAMVC,IAAAA,WAAW,EAAE;AANH;AAbQ,CAAtB;AAuBA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,GAAG,EAAE,GADkB;AAEvBC,EAAAA,QAAQ,EAAE,IAFa;AAGvBC,EAAAA,SAAS,EAAE;AAHY,CAAzB;AAMA,IAAMC,eAAe,GAAG;AACtBpB,EAAAA,MAAM,EAAE,CAAC,CADa;AAEtBqB,EAAAA,GAAG,EAAE,CAFiB;AAGtBC,EAAAA,IAAI,EAAE,KAHgB;AAItBC,EAAAA,IAAI,EAAE;AAJgB,CAAxB;AAOA,IAAMC,SAAS,GAAG,IAAI3B,IAAI,CAAC4B,KAAT,CAAe1B,aAAf,CAAlB;AACA,IAAM2B,YAAY,GAAG,IAAI7B,IAAI,CAAC8B,QAAT,CAAkBX,gBAAlB,CAArB;AACA,IAAMY,WAAW,GAAG,IAAI/B,IAAI,CAACgC,OAAT,CAAiBT,eAAjB,EAAkCU,aAAlC,EAApB;AACAN,SAAS,CAACO,KAAV,CAAgBL,YAAhB,EAA8BE,WAA9B;AAEA,IAAMI,UAAU,GAAG,CACjB;AACEC,EAAAA,EAAE,EAAEnC,cAAc,EADpB;AAEEoC,EAAAA,IAAI,EAAE,YAFR;AAGEtB,EAAAA,IAAI,EAAE,WAHR;AAIEuB,EAAAA,IAAI,EAAEX,SAJR;AAKEY,EAAAA,QAAQ,EAAErC;AALZ,CADiB,EAQjB;AACEkC,EAAAA,EAAE,EAAEnC,cAAc,EADpB;AAEEoC,EAAAA,IAAI,EAAE,UAFR;AAGEtB,EAAAA,IAAI,EAAE,gBAHR;AAIEuB,EAAAA,IAAI,EAAET,YAJR;AAKEU,EAAAA,QAAQ,EAAEpB;AALZ,CARiB,EAejB;AACEiB,EAAAA,EAAE,EAAEnC,cAAc,EADpB;AAEEoC,EAAAA,IAAI,EAAE,SAFR;AAGEtB,EAAAA,IAAI,EAAE,SAHR;AAIEuB,EAAAA,IAAI,EAAEP,WAJR;AAKEQ,EAAAA,QAAQ,EAAEhB;AALZ,CAfiB,CAAnB;AAwBA,IAAMiB,UAAU,GAAG,IAAIxC,IAAI,CAACyC,QAAT,CACjB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACdhB,EAAAA,SAAS,CAACiB,oBAAV,CAA+BD,IAA/B,EAAqC,IAArC,EAA2CD,IAA3C;AACD,CAHgB,EAIjB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAJiB,EAKjB,IALiB,CAAnB;AAQA,SAASP,UAAT,EAAqBK,UAArB","sourcesContent":["import * as Tone from 'tone'\nimport { generateUniqId } from '../utilities'\n\nconst synthSettings = {\n  volume: 0.8,\n  detune: 0,\n  portamento: 0.05,\n  envelope: {\n    attack: 0.05,\n    attackCurve: 'exponential',\n    decay: 0.2,\n    decayCurve: 'exponential',\n    sustain: 0.2,\n    release: 1.5,\n    releaseCurve: 'exponential'\n  },\n  oscillator: {\n    type: 'fatsawtooth',\n    modulationType: 'sine',\n    // partialCount: 0,\n    // partials: [],\n    phase: 0,\n    harmonicity: 0.5\n  }\n}\n\nconst freeverbSettings = {\n  wet: 0.9,\n  roomSize: 0.08,\n  dampening: 40\n}\n\nconst channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n}\n\nconst synthNode = new Tone.Synth(synthSettings)\nconst freeverbNode = new Tone.Freeverb(freeverbSettings)\nconst channelNode = new Tone.Channel(channelSettings).toDestination()\nsynthNode.chain(freeverbNode, channelNode)\n\nconst instrument = [\n  {\n    id: generateUniqId(),\n    name: 'Bass Synth',\n    type: 'ToneSynth',\n    node: synthNode,\n    settings: synthSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Freeverb',\n    type: 'FreeverbEffect',\n    node: freeverbNode,\n    settings: freeverbSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Channel',\n    type: 'Channel',\n    node: channelNode,\n    settings: channelSettings\n  }\n]\n\nconst sequention = new Tone.Sequence(\n  (time, note) => {\n    synthNode.triggerAttackRelease(note, '1m', time)\n  },\n  ['C3', 'D3', 'E2', 'E3'],\n  '1m'\n)\n\nexport { instrument, sequention }\n"]},"metadata":{},"sourceType":"module"}