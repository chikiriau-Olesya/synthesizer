{"ast":null,"code":"import * as Tone from 'tone';\nimport { generateUniqId } from '../utilities';\nvar synthSettings = {\n  volume: 0,\n  detune: 0,\n  portamento: 0,\n  envelope: {\n    attack: 0.14,\n    attackCurve: 'step',\n    decay: 2,\n    decayCurve: 'exponential',\n    sustain: 0.65,\n    release: 0.5,\n    releaseCurve: 'bounce'\n  },\n  oscillator: {\n    type: 'fatsine',\n    modulationType: 'fatsine',\n    // partialCount: 0,\n    // partials: [],\n    phase: 0,\n    harmonicity: 0\n  }\n}; // const autoFilterSettings = {\n//   wet: 0,\n//   type: 'sine',\n//   frequency: 1,\n//   depth: 1,\n//   baseFrequency: 200,\n//   octaves: 2.6,\n//   filter: {\n//     type: 'lowpass',\n//     frequency: 100,\n//     rolloff: -12,\n//     Q: 1\n//   }\n// }\n\nvar autoPannerSettings = {\n  wet: 0,\n  type: 'sine18',\n  frequency: 40,\n  depth: 1\n}; // const autoWahSettings = {\n//   wet: 0,\n//   baseFrequency: 100,\n//   octaves: 6,\n//   sensitivity: 0,\n//   Q: 2,\n//   gain: 2,\n//   follower: 0.1\n// }\n// const bitCrusherSettings = {\n//   wet: 0,\n//   bits: 4\n// }\n\nvar chebyshevSettings = {\n  wet: 0,\n  order: 50,\n  oversample: 'none'\n}; //\n// const chorusSettings = {\n//   wet: 0,\n//   type: 'sine',\n//   frequency: 1.5,\n//   delayTime: 3.5,\n//   depth: 0.7,\n//   spread: 180\n// }\n//\n// const distortionSettings = {\n//   wet: 0.17,\n//   distortion: 0.54,\n//   oversample: 'none'\n// }\n// const feedbackDelaySettings = {\n//   wet: 0,\n//   delayTime: 0.8,\n//   maxDelay: 0.8\n// }\n//\n// const freeverbSettings = {\n//   wet: 0.9,\n//   roomSize: 0.08,\n//   dampening: 40\n// }\n//\n// const frequencyShifterSettings = {\n//   wet: 0,\n//   frequency: 42\n// }\n//\n// const jcReverbSettings = {\n//   wet: 0,\n//   roomSize: 0.5\n// }\n// const midSideSettings = {\n//   wet: 0\n// }\n// const phaserSettings = {\n//   wet: 0,\n//   frequency: 0.5,\n//   octaves: 3,\n//   stages: 10,\n//   Q: 10,\n//   baseFrequency: 350\n// }\n\nvar pingPongDelaySettings = {\n  wet: 0,\n  delayTime: 0.25,\n  maxDelayTime: 1\n}; //\n\nvar pitchShiftSettings = {\n  wet: 0.75,\n  pitch: 0,\n  windowSize: 0.1,\n  delayTime: 0,\n  feedback: 0.315\n}; //\n// const reverbSettings = {\n//   wet: 0.5,\n//   decay: 7.15,\n//   preDelay: 0.01\n// }\n//\n// const stereoWidenerSettings = {\n//   wet: 0,\n//   width: 0.5\n// }\n//\n// const tremoloSettings = {\n//   wet: 0,\n//   frequency: 10,\n//   type: 'sine',\n//   depth: 0.5,\n//   spread: 180\n// }\n\nvar vibratoSettings = {\n  wet: 0,\n  maxDelay: 0.005,\n  frequency: 5,\n  depth: 0.1,\n  type: 'sine'\n};\nvar channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n};\nvar synthNode = new Tone.Synth(synthSettings); // const autoFilterNode = new Tone.AutoFilter(autoFilterSettings).start()\n// const autoPannerNode = new Tone.AutoPanner(autoPannerSettings).start()\n// const autoWahNode = new Tone.AutoWah(autoWahSettings)\n// // const bitCrusherNode = new Tone.BitCrusher(bitCrusherSettings)\n\nvar chebyshevNode = new Tone.Chebyshev(chebyshevSettings); // const chorusNode = new Tone.Chorus(chorusSettings)\n// const distortionNode = new Tone.Distortion(distortionSettings)\n// const feedbackDelayNode = new Tone.FeedbackDelay(feedbackDelaySettings)\n// const freeverbNode = new Tone.Freeverb(freeverbSettings)\n// const frequencyShifterNode = new Tone.FrequencyShifter(frequencyShifterSettings)\n// const jcReverbNode = new Tone.JCReverb(jcReverbSettings)\n// // const midSideNode = new Tone.MidSideEffect(midSideSettings)\n// const phaserNode = new Tone.Phaser(phaserSettings)\n\nvar pingPongDelayNode = new Tone.PingPongDelay(pingPongDelaySettings);\nvar pitchShiftNode = new Tone.PitchShift(pitchShiftSettings); // const reverbNode = new Tone.Reverb(reverbSettings)\n// const stereoWidenerNode = new Tone.StereoWidener(stereoWidenerSettings)\n// const tremoloNode = new Tone.Tremolo(tremoloSettings)\n\nvar vibratoNode = new Tone.Vibrato(vibratoSettings);\nvar channelNode = new Tone.Channel(channelSettings).toDestination();\nsynthNode.chain( // autoFilterNode,\n// autoPannerNode,\n// autoWahNode,\n// // bitCrusherNode,\nchebyshevNode, // chorusNode,\n// distortionNode,\n// feedbackDelayNode,\n// freeverbNode,\n// frequencyShifterNode,\n// jcReverbNode,\n// // midSideNode,\n// phaserNode,\npingPongDelayNode, pitchShiftNode, // reverbNode,\n// stereoWidenerNode,\n// tremoloNode,\nvibratoNode, channelNode);\nvar instrument = [{\n  id: generateUniqId(),\n  name: 'Day Synth',\n  type: 'ToneSynth',\n  node: synthNode,\n  settings: synthSettings\n}, // {\n//   id: generateUniqId(),\n//   name: 'Auto Filter',\n//   type: 'AutoFilterEffect',\n//   node: autoFilterNode,\n//   settings: autoFilterSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Auto Panner',\n//   type: 'AutoPannerEffect',\n//   node: autoPannerNode,\n//   settings: autoPannerSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Auto Wah',\n//   type: 'AutoWahEffect',\n//   node: autoWahNode,\n//   settings: autoWahSettings\n// },\n// // {\n// //   id: generateUniqId(),\n// //   name: 'Bit Crusher',\n// //   type: 'BitCrusherEffect',\n// //   node: bitCrusherNode,\n// //   settings: bitCrusherSettings\n// // },\n{\n  id: generateUniqId(),\n  name: 'Chebyshev',\n  type: 'ChebyshevEffect',\n  node: chebyshevNode,\n  settings: chebyshevSettings\n}, // {\n//   id: generateUniqId(),\n//   name: 'Chorus',\n//   type: 'ChorusEffect',\n//   node: chorusNode,\n//   settings: chorusSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Distortion',\n//   type: 'DistortionEffect',\n//   node: distortionNode,\n//   settings: distortionSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Feedback Delay',\n//   type: 'FeedbackDelayEffect',\n//   node: feedbackDelayNode,\n//   settings: feedbackDelaySettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Freeverb',\n//   type: 'FreeverbEffect',\n//   node: freeverbNode,\n//   settings: freeverbSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Frequency Shift',\n//   type: 'FrequencyShifterEffect',\n//   node: frequencyShifterNode,\n//   settings: frequencyShifterSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'JC Reverb',\n//   type: 'JCReverbEffect',\n//   node: jcReverbNode,\n//   settings: jcReverbSettings\n// },\n// // {\n// //   id: generateUniqId(),\n// //   name: 'Mid Side Effect',\n// //   type: 'MidSideEffect',\n// //   node: midSideNode,\n// //   settings: midSideSettings\n// // },\n// {\n//   id: generateUniqId(),\n//   name: 'Phaser',\n//   type: 'PhaserEffect',\n//   node: phaserNode,\n//   settings: phaserSettings\n// },\n{\n  id: generateUniqId(),\n  name: 'Ping Pong Delay',\n  type: 'PingPongDelayEffect',\n  node: pingPongDelayNode,\n  settings: pingPongDelaySettings\n}, {\n  id: generateUniqId(),\n  name: 'Pitch Shift',\n  type: 'PitchShiftEffect',\n  node: pitchShiftNode,\n  settings: pitchShiftSettings\n}, // {\n//   id: generateUniqId(),\n//   name: 'Reverb',\n//   type: 'ReverbEffect',\n//   node: reverbNode,\n//   settings: reverbSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Stereo Widener',\n//   type: 'StereoWidenerEffect',\n//   node: stereoWidenerNode,\n//   settings: stereoWidenerSettings\n// },\n// {\n//   id: generateUniqId(),\n//   name: 'Tremolo',\n//   type: 'TremoloEffect',\n//   node: tremoloNode,\n//   settings: tremoloSettings\n// },\n{\n  id: generateUniqId(),\n  name: 'Vibrato',\n  type: 'VibratoEffect',\n  node: vibratoNode,\n  settings: vibratoSettings\n}, {\n  id: generateUniqId(),\n  name: 'Channel',\n  type: 'Channel',\n  node: channelNode,\n  settings: channelSettings\n}]; // prettier-ignore nathan taylor 10.7PO sync\n\nvar v = 1;\nvar sequention = new Tone.Sequence(function (time, note) {\n  synthNode.triggerAttackRelease(note, '4n', time);\n}, ['C5', 'D3', 'C5', 'D3'], '4n');\nexport { instrument, sequention };","map":{"version":3,"sources":["/Users/olesyashevchenko/synthExample/app/javascript/tunes/day_synth.js"],"names":["Tone","generateUniqId","synthSettings","volume","detune","portamento","envelope","attack","attackCurve","decay","decayCurve","sustain","release","releaseCurve","oscillator","type","modulationType","phase","harmonicity","autoPannerSettings","wet","frequency","depth","chebyshevSettings","order","oversample","pingPongDelaySettings","delayTime","maxDelayTime","pitchShiftSettings","pitch","windowSize","feedback","vibratoSettings","maxDelay","channelSettings","pan","mute","solo","synthNode","Synth","chebyshevNode","Chebyshev","pingPongDelayNode","PingPongDelay","pitchShiftNode","PitchShift","vibratoNode","Vibrato","channelNode","Channel","toDestination","chain","instrument","id","name","node","settings","v","sequention","Sequence","time","note","triggerAttackRelease"],"mappings":"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,EACE;AACA;AACA;AACA;AACAX,aALF,EAME;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,iBAdF,EAeEE,cAfF,EAgBE;AACA;AACA;AACAE,WAnBF,EAoBEE,WApBF;AAuBA,IAAMI,UAAU,GAAG,CACjB;AACEC,EAAAA,EAAE,EAAErD,cAAc,EADpB;AAEEsD,EAAAA,IAAI,EAAE,WAFR;AAGExC,EAAAA,IAAI,EAAE,WAHR;AAIEyC,EAAAA,IAAI,EAAEjB,SAJR;AAKEkB,EAAAA,QAAQ,EAAEvD;AALZ,CADiB,EAQjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEoD,EAAAA,EAAE,EAAErD,cAAc,EADpB;AAEEsD,EAAAA,IAAI,EAAE,WAFR;AAGExC,EAAAA,IAAI,EAAE,iBAHR;AAIEyC,EAAAA,IAAI,EAAEf,aAJR;AAKEgB,EAAAA,QAAQ,EAAElC;AALZ,CApCiB,EA2CjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE+B,EAAAA,EAAE,EAAErD,cAAc,EADpB;AAEEsD,EAAAA,IAAI,EAAE,iBAFR;AAGExC,EAAAA,IAAI,EAAE,qBAHR;AAIEyC,EAAAA,IAAI,EAAEb,iBAJR;AAKEc,EAAAA,QAAQ,EAAE/B;AALZ,CAnGiB,EA0GjB;AACE4B,EAAAA,EAAE,EAAErD,cAAc,EADpB;AAEEsD,EAAAA,IAAI,EAAE,aAFR;AAGExC,EAAAA,IAAI,EAAE,kBAHR;AAIEyC,EAAAA,IAAI,EAAEX,cAJR;AAKEY,EAAAA,QAAQ,EAAE5B;AALZ,CA1GiB,EAiHjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEyB,EAAAA,EAAE,EAAErD,cAAc,EADpB;AAEEsD,EAAAA,IAAI,EAAE,SAFR;AAGExC,EAAAA,IAAI,EAAE,eAHR;AAIEyC,EAAAA,IAAI,EAAET,WAJR;AAKEU,EAAAA,QAAQ,EAAExB;AALZ,CAtIiB,EA6IjB;AACEqB,EAAAA,EAAE,EAAErD,cAAc,EADpB;AAEEsD,EAAAA,IAAI,EAAE,SAFR;AAGExC,EAAAA,IAAI,EAAE,SAHR;AAIEyC,EAAAA,IAAI,EAAEP,WAJR;AAKEQ,EAAAA,QAAQ,EAAEtB;AALZ,CA7IiB,CAAnB,C,CAsJA;;AACA,IAAMuB,CAAC,GAAG,CAAV;AAEA,IAAMC,UAAU,GAAG,IAAI3D,IAAI,CAAC4D,QAAT,CACjB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACdvB,EAAAA,SAAS,CAACwB,oBAAV,CAA+BD,IAA/B,EAAqC,IAArC,EAA2CD,IAA3C;AACD,CAHgB,EAIjB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAJiB,EAKjB,IALiB,CAAnB;AAQA,SAASR,UAAT,EAAqBM,UAArB","sourcesContent":["import * as Tone from 'tone'\nimport { generateUniqId } from '../utilities'\n\nconst synthSettings = {\n  volume: 0,\n  detune: 0,\n  portamento: 0,\n  envelope: {\n    attack: 0.14,\n    attackCurve: 'step',\n    decay: 2,\n    decayCurve: 'exponential',\n    sustain: 0.65,\n    release: 0.5,\n    releaseCurve: 'bounce'\n  },\n  oscillator: {\n    type: 'fatsine',\n    modulationType: 'fatsine',\n    // partialCount: 0,\n    // partials: [],\n    phase: 0,\n    harmonicity: 0\n  }\n}\n\n// const autoFilterSettings = {\n//   wet: 0,\n//   type: 'sine',\n//   frequency: 1,\n//   depth: 1,\n//   baseFrequency: 200,\n//   octaves: 2.6,\n//   filter: {\n//     type: 'lowpass',\n//     frequency: 100,\n//     rolloff: -12,\n//     Q: 1\n//   }\n// }\n\nconst autoPannerSettings = {\n  wet: 0,\n  type: 'sine18',\n  frequency: 40,\n  depth: 1\n}\n\n// const autoWahSettings = {\n//   wet: 0,\n//   baseFrequency: 100,\n//   octaves: 6,\n//   sensitivity: 0,\n//   Q: 2,\n//   gain: 2,\n//   follower: 0.1\n// }\n\n// const bitCrusherSettings = {\n//   wet: 0,\n//   bits: 4\n// }\n\nconst chebyshevSettings = {\n  wet: 0,\n  order: 50,\n  oversample: 'none'\n}\n//\n// const chorusSettings = {\n//   wet: 0,\n//   type: 'sine',\n//   frequency: 1.5,\n//   delayTime: 3.5,\n//   depth: 0.7,\n//   spread: 180\n// }\n//\n// const distortionSettings = {\n//   wet: 0.17,\n//   distortion: 0.54,\n//   oversample: 'none'\n// }\n\n// const feedbackDelaySettings = {\n//   wet: 0,\n//   delayTime: 0.8,\n//   maxDelay: 0.8\n// }\n//\n// const freeverbSettings = {\n//   wet: 0.9,\n//   roomSize: 0.08,\n//   dampening: 40\n// }\n//\n// const frequencyShifterSettings = {\n//   wet: 0,\n//   frequency: 42\n// }\n//\n// const jcReverbSettings = {\n//   wet: 0,\n//   roomSize: 0.5\n// }\n\n// const midSideSettings = {\n//   wet: 0\n// }\n\n// const phaserSettings = {\n//   wet: 0,\n//   frequency: 0.5,\n//   octaves: 3,\n//   stages: 10,\n//   Q: 10,\n//   baseFrequency: 350\n// }\n\nconst pingPongDelaySettings = {\n  wet: 0,\n  delayTime: 0.25,\n  maxDelayTime: 1\n}\n//\nconst pitchShiftSettings = {\n  wet: 0.75,\n  pitch: 0,\n  windowSize: 0.1,\n  delayTime: 0,\n  feedback: 0.315\n}\n//\n// const reverbSettings = {\n//   wet: 0.5,\n//   decay: 7.15,\n//   preDelay: 0.01\n// }\n//\n// const stereoWidenerSettings = {\n//   wet: 0,\n//   width: 0.5\n// }\n//\n// const tremoloSettings = {\n//   wet: 0,\n//   frequency: 10,\n//   type: 'sine',\n//   depth: 0.5,\n//   spread: 180\n// }\n\nconst vibratoSettings = {\n  wet: 0,\n  maxDelay: 0.005,\n  frequency: 5,\n  depth: 0.1,\n  type: 'sine'\n}\n\nconst channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n}\n\nconst synthNode = new Tone.Synth(synthSettings)\n// const autoFilterNode = new Tone.AutoFilter(autoFilterSettings).start()\n// const autoPannerNode = new Tone.AutoPanner(autoPannerSettings).start()\n// const autoWahNode = new Tone.AutoWah(autoWahSettings)\n// // const bitCrusherNode = new Tone.BitCrusher(bitCrusherSettings)\nconst chebyshevNode = new Tone.Chebyshev(chebyshevSettings)\n// const chorusNode = new Tone.Chorus(chorusSettings)\n// const distortionNode = new Tone.Distortion(distortionSettings)\n// const feedbackDelayNode = new Tone.FeedbackDelay(feedbackDelaySettings)\n// const freeverbNode = new Tone.Freeverb(freeverbSettings)\n// const frequencyShifterNode = new Tone.FrequencyShifter(frequencyShifterSettings)\n// const jcReverbNode = new Tone.JCReverb(jcReverbSettings)\n// // const midSideNode = new Tone.MidSideEffect(midSideSettings)\n// const phaserNode = new Tone.Phaser(phaserSettings)\nconst pingPongDelayNode = new Tone.PingPongDelay(pingPongDelaySettings)\nconst pitchShiftNode = new Tone.PitchShift(pitchShiftSettings)\n// const reverbNode = new Tone.Reverb(reverbSettings)\n// const stereoWidenerNode = new Tone.StereoWidener(stereoWidenerSettings)\n// const tremoloNode = new Tone.Tremolo(tremoloSettings)\nconst vibratoNode = new Tone.Vibrato(vibratoSettings)\nconst channelNode = new Tone.Channel(channelSettings).toDestination()\n\nsynthNode.chain(\n  // autoFilterNode,\n  // autoPannerNode,\n  // autoWahNode,\n  // // bitCrusherNode,\n  chebyshevNode,\n  // chorusNode,\n  // distortionNode,\n  // feedbackDelayNode,\n  // freeverbNode,\n  // frequencyShifterNode,\n  // jcReverbNode,\n  // // midSideNode,\n  // phaserNode,\n  pingPongDelayNode,\n  pitchShiftNode,\n  // reverbNode,\n  // stereoWidenerNode,\n  // tremoloNode,\n  vibratoNode,\n  channelNode\n)\n\nconst instrument = [\n  {\n    id: generateUniqId(),\n    name: 'Day Synth',\n    type: 'ToneSynth',\n    node: synthNode,\n    settings: synthSettings\n  },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Auto Filter',\n  //   type: 'AutoFilterEffect',\n  //   node: autoFilterNode,\n  //   settings: autoFilterSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Auto Panner',\n  //   type: 'AutoPannerEffect',\n  //   node: autoPannerNode,\n  //   settings: autoPannerSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Auto Wah',\n  //   type: 'AutoWahEffect',\n  //   node: autoWahNode,\n  //   settings: autoWahSettings\n  // },\n  // // {\n  // //   id: generateUniqId(),\n  // //   name: 'Bit Crusher',\n  // //   type: 'BitCrusherEffect',\n  // //   node: bitCrusherNode,\n  // //   settings: bitCrusherSettings\n  // // },\n  {\n    id: generateUniqId(),\n    name: 'Chebyshev',\n    type: 'ChebyshevEffect',\n    node: chebyshevNode,\n    settings: chebyshevSettings\n  },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Chorus',\n  //   type: 'ChorusEffect',\n  //   node: chorusNode,\n  //   settings: chorusSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Distortion',\n  //   type: 'DistortionEffect',\n  //   node: distortionNode,\n  //   settings: distortionSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Feedback Delay',\n  //   type: 'FeedbackDelayEffect',\n  //   node: feedbackDelayNode,\n  //   settings: feedbackDelaySettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Freeverb',\n  //   type: 'FreeverbEffect',\n  //   node: freeverbNode,\n  //   settings: freeverbSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Frequency Shift',\n  //   type: 'FrequencyShifterEffect',\n  //   node: frequencyShifterNode,\n  //   settings: frequencyShifterSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'JC Reverb',\n  //   type: 'JCReverbEffect',\n  //   node: jcReverbNode,\n  //   settings: jcReverbSettings\n  // },\n  // // {\n  // //   id: generateUniqId(),\n  // //   name: 'Mid Side Effect',\n  // //   type: 'MidSideEffect',\n  // //   node: midSideNode,\n  // //   settings: midSideSettings\n  // // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Phaser',\n  //   type: 'PhaserEffect',\n  //   node: phaserNode,\n  //   settings: phaserSettings\n  // },\n  {\n    id: generateUniqId(),\n    name: 'Ping Pong Delay',\n    type: 'PingPongDelayEffect',\n    node: pingPongDelayNode,\n    settings: pingPongDelaySettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Pitch Shift',\n    type: 'PitchShiftEffect',\n    node: pitchShiftNode,\n    settings: pitchShiftSettings\n  },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Reverb',\n  //   type: 'ReverbEffect',\n  //   node: reverbNode,\n  //   settings: reverbSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Stereo Widener',\n  //   type: 'StereoWidenerEffect',\n  //   node: stereoWidenerNode,\n  //   settings: stereoWidenerSettings\n  // },\n  // {\n  //   id: generateUniqId(),\n  //   name: 'Tremolo',\n  //   type: 'TremoloEffect',\n  //   node: tremoloNode,\n  //   settings: tremoloSettings\n  // },\n  {\n    id: generateUniqId(),\n    name: 'Vibrato',\n    type: 'VibratoEffect',\n    node: vibratoNode,\n    settings: vibratoSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Channel',\n    type: 'Channel',\n    node: channelNode,\n    settings: channelSettings\n  }\n]\n\n// prettier-ignore nathan taylor 10.7PO sync\nconst v = 1\n\nconst sequention = new Tone.Sequence(\n  (time, note) => {\n    synthNode.triggerAttackRelease(note, '4n', time)\n  },\n  ['C5', 'D3', 'C5', 'D3'],\n  '4n'\n)\n\nexport { instrument, sequention }\n"]},"metadata":{},"sourceType":"module"}