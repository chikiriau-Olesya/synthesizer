{"ast":null,"code":"var _jsxFileName = \"/Users/olesyashevchenko/synthExample/app/javascript/module_components/Player.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ToggleButton from '../control_components/ToggleButton';\n\nvar Player = /*#__PURE__*/function (_Component) {\n  _inherits(Player, _Component);\n\n  var _super = _createSuper(Player);\n\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, props);\n\n    _this.updateNodeParams = function () {\n      var _this$props = _this.props,\n          node = _this$props.node,\n          settings = _this$props.settings;\n      var mute = settings.mute,\n          volume = settings.volume;\n      player.volume.value = volume;\n      player.mute = mute;\n    };\n\n    _this.handlePropertyValueChange = function (property, value) {\n      var _this$props2 = _this.props,\n          id = _this$props2.id,\n          handlePropertyValueChange = _this$props2.handlePropertyValueChange;\n      handlePropertyValueChange(id, property, value);\n    };\n\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          id = _this$props3.id,\n          name = _this$props3.name,\n          settings = _this$props3.settings;\n      var volume = settings.volume,\n          mute = settings.mute;\n      this.updateNodeParams();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ChorusEffect\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, name), /*#__PURE__*/React.createElement(ToggleButton, {\n        text: \"Play\",\n        isOn: mute,\n        handleClick: function handleClick() {\n          return _this2.handlePropertyValueChange(['mute'], !mute);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nexport { Player as default };\nPlayer.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  node: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n  handlePropertyValueChange: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/olesyashevchenko/synthExample/app/javascript/module_components/Player.jsx"],"names":["PropTypes","React","Component","ToggleButton","Player","props","updateNodeParams","node","settings","mute","volume","player","value","handlePropertyValueChange","property","id","name","propTypes","number","isRequired","string","object","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,YAAP,MAAyB,oCAAzB;;IAEqBC,M;;;;;AACnB,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAInBC,gBAJmB,GAIA,YAAM;AACvB,wBAA2B,MAAKD,KAAhC;AAAA,UAAQE,IAAR,eAAQA,IAAR;AAAA,UAAcC,QAAd,eAAcA,QAAd;AACA,UAAQC,IAAR,GAAyBD,QAAzB,CAAQC,IAAR;AAAA,UAAcC,MAAd,GAAyBF,QAAzB,CAAcE,MAAd;AAEAC,MAAAA,MAAM,CAACD,MAAP,CAAcE,KAAd,GAAsBF,MAAtB;AACAC,MAAAA,MAAM,CAACF,IAAP,GAAcA,IAAd;AACD,KAVkB;;AAAA,UAYnBI,yBAZmB,GAYS,UAACC,QAAD,EAAWF,KAAX,EAAqB;AAC/C,yBAA0C,MAAKP,KAA/C;AAAA,UAAQU,EAAR,gBAAQA,EAAR;AAAA,UAAYF,yBAAZ,gBAAYA,yBAAZ;AACAA,MAAAA,yBAAyB,CAACE,EAAD,EAAKD,QAAL,EAAeF,KAAf,CAAzB;AACD,KAfkB;;AAAA;AAElB;;;;WAeD,kBAAS;AAAA;;AACP,yBAA+B,KAAKP,KAApC;AAAA,UAAQU,EAAR,gBAAQA,EAAR;AAAA,UAAYC,IAAZ,gBAAYA,IAAZ;AAAA,UAAkBR,QAAlB,gBAAkBA,QAAlB;AACA,UAAQE,MAAR,GAAyBF,QAAzB,CAAQE,MAAR;AAAA,UAAgBD,IAAhB,GAAyBD,QAAzB,CAAgBC,IAAhB;AAEA,WAAKH,gBAAL;AAEA,0BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKU,IAAL,CADF,eAEE,oBAAC,YAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAEP,IAFR;AAGE,QAAA,WAAW,EAAE;AAAA,iBAAM,MAAI,CAACI,yBAAL,CAA+B,CAAC,MAAD,CAA/B,EAAyC,CAACJ,IAA1C,CAAN;AAAA,SAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAUD;;;;EAlCiCP,S;;SAAfE,M;AAqCrBA,MAAM,CAACa,SAAP,GAAmB;AACjBF,EAAAA,EAAE,EAAEf,SAAS,CAACkB,MAAV,CAAiBC,UADJ;AAEjBH,EAAAA,IAAI,EAAEhB,SAAS,CAACoB,MAAV,CAAiBD,UAFN;AAGjBZ,EAAAA,IAAI,EAAEP,SAAS,CAACqB,MAAV,CAAiBF,UAHN;AAIjBX,EAAAA,QAAQ,EAAER,SAAS,CAACqB,MAAV,CAAiBF,UAJV;AAKjBN,EAAAA,yBAAyB,EAAEb,SAAS,CAACsB,IAAV,CAAeH;AALzB,CAAnB","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport ToggleButton from '../control_components/ToggleButton'\n\nexport default class Player extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  updateNodeParams = () => {\n    const { node, settings } = this.props\n    const { mute, volume } = settings\n\n    player.volume.value = volume\n    player.mute = mute\n  }\n\n  handlePropertyValueChange = (property, value) => {\n    const { id, handlePropertyValueChange } = this.props\n    handlePropertyValueChange(id, property, value)\n  }\n\n  render() {\n    const { id, name, settings } = this.props\n    const { volume, mute } = settings\n\n    this.updateNodeParams()\n\n    return (\n      <div className=\"ChorusEffect\">\n        <h1>{name}</h1>\n        <ToggleButton\n          text=\"Play\"\n          isOn={mute}\n          handleClick={() => this.handlePropertyValueChange(['mute'], !mute)}\n        />\n      </div>\n    )\n  }\n}\n\nPlayer.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  node: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n  handlePropertyValueChange: PropTypes.func.isRequired\n}\n"]},"metadata":{},"sourceType":"module"}