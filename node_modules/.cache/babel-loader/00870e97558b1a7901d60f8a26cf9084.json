{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport var createTestAudioWorkletProcessorNoOutputsSupport = function createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var blob, messageChannel, offlineAudioContext, url, isCallingProcess, audioWorkletNode, oscillator;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(nativeAudioWorkletNodeConstructor === null)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", true);\n\n          case 2:\n            if (!(nativeOfflineAudioContextConstructor === null)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 4:\n            blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n              type: 'application/javascript; charset=utf-8'\n            });\n            messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n            offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n            url = URL.createObjectURL(blob);\n            isCallingProcess = false;\n            _context.prev = 9;\n            _context.next = 12;\n            return offlineAudioContext.audioWorklet.addModule(url);\n\n          case 12:\n            audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n              numberOfOutputs: 0\n            });\n            oscillator = offlineAudioContext.createOscillator();\n            _context.next = 16;\n            return new Promise(function (resolve) {\n              audioWorkletNode.port.onmessage = function () {\n                return resolve();\n              };\n\n              audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n\n          case 16:\n            audioWorkletNode.port.onmessage = function () {\n              return isCallingProcess = true;\n            };\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            _context.next = 21;\n            return offlineAudioContext.startRendering();\n\n          case 21:\n            _context.next = 23;\n            return new Promise(function (resolve) {\n              messageChannel.port1.onmessage = function (_ref2) {\n                var data = _ref2.data;\n                return resolve(data === 1);\n              };\n\n              messageChannel.port1.postMessage(0);\n            });\n\n          case 23:\n            isCallingProcess = _context.sent;\n            _context.next = 28;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](9);\n\n          case 28:\n            _context.prev = 28;\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n            return _context.finish(28);\n\n          case 32:\n            return _context.abrupt(\"return\", isCallingProcess);\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 26, 28, 32]]);\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}