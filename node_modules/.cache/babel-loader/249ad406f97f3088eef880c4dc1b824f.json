{"ast":null,"code":"import * as Tone from 'tone';\nimport { generateUniqId } from '../utilities';\nvar synthSettings = {\n  volume: 0,\n  detune: 0,\n  portamento: 0.05,\n  envelope: {\n    attack: 0.05,\n    attackCurve: 'exponential',\n    decay: 0.2,\n    decayCurve: 'exponential',\n    sustain: 0.2,\n    release: 1.5,\n    releaseCurve: 'exponential'\n  },\n  oscillator: {\n    type: 'fatsawtooth',\n    modulationType: 'sine',\n    // partialCount: 0,\n    // partials: [],\n    phase: 0,\n    harmonicity: 0.5\n  }\n};\nvar channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n};\nvar synthNode = new Tone.Synth(synthSettings);\nvar channelNode = new Tone.Channel(channelSettings).toDestination();\nsynthNode.chain(channelNode);\nvar instrument = [{\n  id: generateUniqId(),\n  name: 'Drum Synth',\n  type: 'ToneSynth',\n  node: synthNode,\n  settings: synthSettings\n}, {\n  id: generateUniqId(),\n  name: 'Channel',\n  type: 'Channel',\n  node: channelNode,\n  settings: channelSettings\n}];\nvar sequention = new Tone.Sequence(function (time, note) {\n  synthNode.triggerAttackRelease(note, '1m', time);\n}, // A3 B2 C2 B4 B5 B2 A5 A3\n// B2 C2 C3 C4 C3 C2 B4 A3\n['A3', 'B2', 'C2', 'B4', 'B5', 'B2', 'A5', 'A3', 'B2', 'C2', 'C3', 'C4', 'C3', 'C2', 'B4', 'A3'], '1m');\nexport { instrument, sequention };","map":{"version":3,"sources":["/Users/olesyashevchenko/synthExample/app/javascript/tunes/drums.js"],"names":["Tone","generateUniqId","synthSettings","volume","detune","portamento","envelope","attack","attackCurve","decay","decayCurve","sustain","release","releaseCurve","oscillator","type","modulationType","phase","harmonicity","channelSettings","pan","mute","solo","synthNode","Synth","channelNode","Channel","toDestination","chain","instrument","id","name","node","settings","sequention","Sequence","time","note","triggerAttackRelease"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,CADY;AAEpBC,EAAAA,MAAM,EAAE,CAFY;AAGpBC,EAAAA,UAAU,EAAE,IAHQ;AAIpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,IADA;AAERC,IAAAA,WAAW,EAAE,aAFL;AAGRC,IAAAA,KAAK,EAAE,GAHC;AAIRC,IAAAA,UAAU,EAAE,aAJJ;AAKRC,IAAAA,OAAO,EAAE,GALD;AAMRC,IAAAA,OAAO,EAAE,GAND;AAORC,IAAAA,YAAY,EAAE;AAPN,GAJU;AAapBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE,aADI;AAEVC,IAAAA,cAAc,EAAE,MAFN;AAGV;AACA;AACAC,IAAAA,KAAK,EAAE,CALG;AAMVC,IAAAA,WAAW,EAAE;AANH;AAbQ,CAAtB;AAuBA,IAAMC,eAAe,GAAG;AACtBhB,EAAAA,MAAM,EAAE,CAAC,CADa;AAEtBiB,EAAAA,GAAG,EAAE,CAFiB;AAGtBC,EAAAA,IAAI,EAAE,KAHgB;AAItBC,EAAAA,IAAI,EAAE;AAJgB,CAAxB;AAOA,IAAMC,SAAS,GAAG,IAAIvB,IAAI,CAACwB,KAAT,CAAetB,aAAf,CAAlB;AACA,IAAMuB,WAAW,GAAG,IAAIzB,IAAI,CAAC0B,OAAT,CAAiBP,eAAjB,EAAkCQ,aAAlC,EAApB;AACAJ,SAAS,CAACK,KAAV,CAAgBH,WAAhB;AAEA,IAAMI,UAAU,GAAG,CACjB;AACEC,EAAAA,EAAE,EAAE7B,cAAc,EADpB;AAEE8B,EAAAA,IAAI,EAAE,YAFR;AAGEhB,EAAAA,IAAI,EAAE,WAHR;AAIEiB,EAAAA,IAAI,EAAET,SAJR;AAKEU,EAAAA,QAAQ,EAAE/B;AALZ,CADiB,EAQjB;AACE4B,EAAAA,EAAE,EAAE7B,cAAc,EADpB;AAEE8B,EAAAA,IAAI,EAAE,SAFR;AAGEhB,EAAAA,IAAI,EAAE,SAHR;AAIEiB,EAAAA,IAAI,EAAEP,WAJR;AAKEQ,EAAAA,QAAQ,EAAEd;AALZ,CARiB,CAAnB;AAiBA,IAAMe,UAAU,GAAG,IAAIlC,IAAI,CAACmC,QAAT,CACjB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACdd,EAAAA,SAAS,CAACe,oBAAV,CAA+BD,IAA/B,EAAqC,IAArC,EAA2CD,IAA3C;AACD,CAHgB,EAIjB;AACA;AACA,CACE,IADF,EAEE,IAFF,EAGE,IAHF,EAIE,IAJF,EAKE,IALF,EAME,IANF,EAOE,IAPF,EAQE,IARF,EASE,IATF,EAUE,IAVF,EAWE,IAXF,EAYE,IAZF,EAaE,IAbF,EAcE,IAdF,EAeE,IAfF,EAgBE,IAhBF,CANiB,EAwBjB,IAxBiB,CAAnB;AA2BA,SAASP,UAAT,EAAqBK,UAArB","sourcesContent":["import * as Tone from 'tone'\nimport { generateUniqId } from '../utilities'\n\nconst synthSettings = {\n  volume: 0,\n  detune: 0,\n  portamento: 0.05,\n  envelope: {\n    attack: 0.05,\n    attackCurve: 'exponential',\n    decay: 0.2,\n    decayCurve: 'exponential',\n    sustain: 0.2,\n    release: 1.5,\n    releaseCurve: 'exponential'\n  },\n  oscillator: {\n    type: 'fatsawtooth',\n    modulationType: 'sine',\n    // partialCount: 0,\n    // partials: [],\n    phase: 0,\n    harmonicity: 0.5\n  }\n}\n\nconst channelSettings = {\n  volume: -6,\n  pan: 0,\n  mute: false,\n  solo: false\n}\n\nconst synthNode = new Tone.Synth(synthSettings)\nconst channelNode = new Tone.Channel(channelSettings).toDestination()\nsynthNode.chain(channelNode)\n\nconst instrument = [\n  {\n    id: generateUniqId(),\n    name: 'Drum Synth',\n    type: 'ToneSynth',\n    node: synthNode,\n    settings: synthSettings\n  },\n  {\n    id: generateUniqId(),\n    name: 'Channel',\n    type: 'Channel',\n    node: channelNode,\n    settings: channelSettings\n  }\n]\n\nconst sequention = new Tone.Sequence(\n  (time, note) => {\n    synthNode.triggerAttackRelease(note, '1m', time)\n  },\n  // A3 B2 C2 B4 B5 B2 A5 A3\n  // B2 C2 C3 C4 C3 C2 B4 A3\n  [\n    'A3',\n    'B2',\n    'C2',\n    'B4',\n    'B5',\n    'B2',\n    'A5',\n    'A3',\n    'B2',\n    'C2',\n    'C3',\n    'C4',\n    'C3',\n    'C2',\n    'B4',\n    'A3'\n  ],\n  '1m'\n)\n\nexport { instrument, sequention }\n"]},"metadata":{},"sourceType":"module"}